apiVersion: tekton.dev/v1
kind: Task
metadata:
    name: source-git-check
spec:
    params:
        - default: ""
          description: A git branch ref to watch for new source
          name: git-branch
          type: string
        - default: ""
          description: A git tag ref to watch for new source
          name: git-tag
          type: string
        - default: ""
          description: A git commit sha to use
          name: git-commit
          type: string
        - description: The url to the git source repository. +Required
          name: git-url
          type: string
    results:
        - description: The url to the git source repository.
          name: url
          type: string
        - description: The sha to clone as configured by commit/branch/tag
          name: sha
          type: string
        - description: The sha to clone as configured by commit/branch/tag
          name: checksum
          type: string
        - description: Important result description, especially for error messages
          name: message
          type: string
    stepTemplate:
        computeResources: {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                    - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
                type: RuntimeDefault
    steps:
        - computeResources: {}
          image: cxscssa.azurecr.io/tap-1-11-0/tap-packages@sha256:6a6a55459af4ff7f0769c2cd0d2af37d8e4c3ba2bab2a6161180954955e63e4c
          name: get-latest-commit
          script: |-
            #!/usr/bin/env sh
            set -eu
            url="$(params.git-url)"
            branch="$(params.git-branch)"
            tag="$(params.git-tag)"
            commit="$(params.git-commit)"

            if [ -z "$url" ]; then
              printf "error: no git-url provided. git-url must exist\n" | tee $(results.message.path)
              exit 1
            fi

            printf '%b\n' "$url" | tee $(results.url.path)

            if [ ! -z "$branch" ]; then
              sha=$(git ls-remote --heads $url $branch | awk '{print $1}')
              if [ -z "$sha" ]; then
                printf 'error: using git-branch:%b\n' "$(params.git-branch)" | tee $(results.message.path)
                exit 1
              else
                printf '%b\n' "$sha" | tee $(results.sha.path)
                printf 'success: using git-branch: %b\n' "$(params.git-branch)" | tee $(results.message.path)
              fi
            elif [ ! -z "$tag" ]; then
              sha=$(git ls-remote --tags $(params.git-url) refs/tags/$(params.git-tag) | awk '{print $1}')
              if [ -z "$sha" ]; then
                printf 'error: using git-tag: %b\n' "$(params.git-tag)" | tee $(results.message.path)
                exit 1
              else
                printf '%b\n' "$sha" | tee $(results.sha.path)
                printf 'success: using git-tag: %b\n' "$(params.git-tag)" | tee $(results.message.path)
              fi
            elif [ ! -z "$commit" ]; then
              git_ls_remote_output=$(git ls-remote --refs $(params.git-url) | awk '{print $1}')
              if [ $? -ne 0 ]; then
                printf 'error: invalid %b\n' "$(params.git-url)"  | tee $(results.message.path)
                exit 1
              fi
              if echo "$git_ls_remote_output" | grep -q "$commit"; then
                printf '%b\n' "$(params.git-commit)" | tee $(results.sha.path)
                printf 'success: using git-commit: %b\n' "$(params.git-commit)" | tee $(results.message.path)
              else
                printf 'error: commit %b not found in %b\n' "$(params.git-commit)" "$(params.git-url)"  | tee $(results.message.path)
                exit 1
              fi
            else
              printf "error: cannot look for source, you must provide one of git-branch, git-tag, git-commit or git-url.\n" | tee $(results.message.path)
              exit 1
            fi
